#include<iostream>
using namespace std;

char path[10];

int mul(int a, int b)
{
	return a * b;
}
int add(int a, int b)
{
	return a + b;
}
int sub(int a, int b)
{
	return a - b;
}

int sum, tmp;
int num[3] = { 22,79,21 };
int flag = 0;
void func(int lev)
{
	if (lev==2) {
		flag = 0;
		for (int i = 0; i < 3; i++) {
			if (path[0] == '0'&&flag==0 ) {
				tmp += mul(num[0], num[1]);
				flag = 1;
				continue;
			}
			else if (path[1] == '0' && flag == 1) {
				tmp = mul(tmp, num[2]);
				flag = 0;
				continue;
			}

			if (path[0] == '1' && flag == 0) {
				tmp += add(num[0], num[1]);
				flag = 1;
				continue;
			}
			else if (path[1] == '1' && flag == 1) {
				tmp = add(tmp, num[2]);
				flag = 0;
				continue;
			}

			if (path[0] == '2' && flag == 0) {
				tmp += sub(num[0], num[1]);
				flag = 1;

				continue;
			}
			else if (path[1] == '2' &&flag==1) {
				tmp = sub(tmp, num[2]);
				flag = 0;

				continue;
			}
			flag = 1;

		}
		
		return;
	}

	//재귀
	for (int brn = 0; brn < 3; brn++) {
		path[lev] = '0'+brn;
		func(lev + 1);
		if (tmp % 101 == 0 && tmp != 0)
			cout << path << endl;
		//cout << tmp << endl;
		tmp = 0;
		path[lev] = 0;
	}
}
int main()
{
	func(0);
	
}

//for (int i = 0; i < 3; i++) {
//	if (path[lev] == 0) {
//		tmp += mul(a, b);
//	}
//	else if (path[lev] == 1) {
//		tmp += add(a, b);
//	}
//	else if (path[lev] == 2) {
//		tmp += sub(a, b);
//	}
//}






/*

#include <iostream>
#include <algorithm>
#include <queue>
// min,max포함
using namespace std;

struct student {
	string name;
	int age;
	int grade;
};
/*bool cmp(int left, int right) {
	if (left > right)	// true상황일때 안 바꿈
		return true;
	if(right < left)	// false상황일때 바꿈
		return false;
	return false;
}
*/


/*
	sort 오름차순 정렬 default
	left<right
	pq 큰것 부터 나오는 maxheap
	left<right
*/
bool ssafycmp(student left, student right)
struct cmp {
	// pq에서 < 쓰면 maxheap
	// sort와 동일한 기준이면 반대
	// 내가 원하는 상황에선 false
		//pq에서도 마지막은 false

	bool operator() (int left, int right) {
		if (left > right) return true;
		if (left < right) return false;
		return false;
	}
};

struct ssafycmp {
	bool operator() (student left, student right) {
		// 거꾸로 넣어야함
		if (left.grade > right.grade) return false;
		if (left.grade < right.grade) return true;
		if (left.age > right.age) return false;
		if (left.age > right.age) return true;
		if (left.name > right.name) return false;
		if (left.name < right.name) return true;
		return false;
	}
};

int main()
{
	int arr[] = { 1,3,5,4,2 };
	//오름차순
	/*
	sort(arr, arr + 5);
	for (int i = 0; i < 5; i++)
		cout << arr[i] << ' ';
	*/

	//내림차순
	/*
	sort(arr, arr + 5, cmp);
	for (int i = 0; i < 5; i++)
		cout << arr[i] <<' ';
	*/

	//우선순위 큐 maxheap: default
	/*
	priority_queue <int> pq;
	//삽입: push()
	//삭제: pop()
	//**맨 위(최우선순위): top()
	//공백: empty() 이외는 유사함
	for (int i = 0; i < 5; i++)
		pq.push(arr[i]); //heapify

	while (!pq.empty()) {
		cout << pq.top() << ' ';
		pq.pop(); //heapify
	}
	*/

	//우선순위 큐 minheap
	// priority_queue<typename,container,less>
	// typename: 자료형
	// container: vector
	// less: compare cmp아님 -> 함수 구조체를 사용함
	// 변경하기 위해 구조체 함수를 넣어야함
	priority_queue <int,vector<int>,cmp> pq;
	for (int i = 0; i < 5; i++)
		pq.push(arr[i]); //heapify
	while (!pq.empty()) {
		cout << pq.top() << ' ';
		pq.pop(); //heapify
	}

	// 사용자 정의 heap
	priority_queue <student> pq;
	pq.push({ "kim",3,100 });
	pq.push({ "kin",3,100 });
	pq.push({ "kil",3,100 });
	// 1.점숫순
	// 2.나이순
	// 3.이름순
	while (!pq.empty()) {
		
	}

	//sort와 priotyqueue
	//sort: O(NlogN) 
	//pq: O(logN)

	//n개의 정수 입력 가장 큰수의 출력
	//sort 입력 -> 정력 -> arr[n-1] => O(NlogN)
	//pq 입력 -> 삽입(logN) -> hepify -> pq.top()

	//n개의 query
	// 2현재 최대값 삭제
	// 1이면 삽입
	// 0이면 최대값 출력
	
	//sort: Q * NlogN 삽입 추출시 계속
	//pq: Q * (logN)

	//sort: 1회 정렬로 해결이 가능할때
	//pq: 계속 새로운 값의 삽입/추출 (변화가 될 때)
	
}


*/