dfs,bfs -> 그래프탐색
그래프 노드 번호 임의 지정
인접행렬,인접리스트
1.인접행렬
인자체크
1차원 배열의 추가생성(배열값 저장용도)

연결노드의 출력
taskkill/f /pid 2692


#include <iostream>
#include <vector>
using namespace std;

//인접행렬 초기화
/*
int arr[5][5] = {
	0,0,0,0,1,
	0,0,1,1,0,
	1,0,1,0,0,
	0,0,0,0,0,
};
int value[5] = { 3,5,1,5,7 };
*/

/*
int arr[5][5] = {
	0,1,0,0,0,
	0,0,1,1,0,
	0,0,0,0,0,
	0,0,1,1,0,
	0,0,1,0,0
};
int value[5] = { 9,8,21,15,4 };
int main()
{

	int sum = 0, Max = 0,Maxidx=0;
	for (int i = 0; i < 5; i++) {
		sum = 0;
		for (int j = 0; j < 5; j++) {
			sum += arr[j][i];
		}
		if (Max < sum) {
				Max = sum;
				Maxidx = i;
		}
	}
	cout << value[Maxidx];
}
*/

/*
//연결노드의 출력
int arr[4][4] = {
	0,1,0,1,
	0,0,0,1,
	1,0,0,1,
	0,0,0,0
};
int value[4] = { 15,49,-77,88 };

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < 4; i++) {
		if (arr[n][i] == 1) {
			cout << i <<' ';
			cout << value[i]<<endl;
		}
	}
	return 0;
}
*/

/*
트리
int arr[6][6] = {
	0,1,1,0,0,0,
	0,0,0,1,1,0,
	0,0,0,0,0,1,
	0,0,0,0,0,0,
	0,0,0,0,0,0,
	0,0,0,0,0,0,
};
char value[6] = { 'A','B','T','R','B','G'};

void run(int now)
{
	for (int i = 0; i < 6; i++) {
		if (arr[now][i] == 0) continue;
		run(i);
	}
}

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < 6; i++) {
		if (arr[i][n] == 0) continue;
			cout << i;
	}
}
*/

/*
int arr[4][4] = {
	0,0,1,0,
	1,0,1,0,
	0,1,1,1,
	0,0,1,1
};
char value[4] = { 'A','B','C','D' };


int main()
{
	int n;
	cin >> n;

	// 들어온 값 arr[n][j]
	for (int j = 0; j < 4; j++) {
		if (arr[n][j] == 0) continue;
		cout << value[n] << "일대 나간 값" << value[j] << endl;
	}

	// 나간 값 arr[i][n]
	for (int i = 0; i < 4; i++) {
		if (arr[i][n] == 0) continue;
		cout << value[n] << "일때 들어온 값" << value[i]<<endl;
	}	
}
*/

/*int arr[6][6] = {
	0,1,1,1,
	0,0,1,0,
	1,0,1,0,
	0,0,0,0
};

int via[4] = { 0 };
int cnt = 0;
char path[10];

void run(int now)
{
	if (now == 2) {
		cout << path << ' '<<endl;
		cnt++;
		return;
	}

	cout << now;
	for (int j = 0; j < 4; j++) {
		if (arr[now][j] == 0) continue;
		if (via[j] == 1) continue;

		path[now] = 'A'+j;
		via[j] = 1;

		run(j);

		path[now] = 0;
		via[j] = 0;
		// via[j] 초기화x 연결된 노드를 1회씩만 모두 탐색 ex) 탐색의 가능확인
		// via[j] 모든 노드를 탐색 ex) 탐색한 총 가지수
	}
}

int main()
{
	via[0] = 1;
	run(0);
	cout << cnt;
}*/

// ex)0번 부터 3까지 갈수 있는 길의 개수
// ex)0부터 3까지 갈 수있는지 여부

//가중치 최소값 구하기
/*
int arr[4][4] = {
	0,50,60,300,
	0,0,7,0,
	30,0,0,10,
	0,0,0,0
};
int via[4];
int Min = 21e8;

void run(int now, int sum)
{
	if (now == 3) {
		cout << sum << ' ';
		if (Min > sum) Min = sum;
		return;
	}
	for (int to = 0; to < 4; to++) {
		if (arr[now][to] == 0) continue;
		if (via[to] == 1) continue;
		via[to] = 1;
		run(to, sum + arr[now][to]);
		via[to] = 0;
		
	}
}
int main() 
{
	via[0] = 1;
	run(0, 0);
	cout << "최소";
	cout << Min;

	return 0;
}
*/