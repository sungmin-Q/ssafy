#include <iostream>
#include <vector>
#include<queue>
using namespace std;

//인접행렬 초기화
/*
int arr[5][5] = {
	0,0,0,0,1,
	0,0,1,1,0,
	1,0,1,0,0,
	0,0,0,0,0,
};
int value[5] = { 3,5,1,5,7 };
*/

/*
int arr[5][5] = {
	0,1,0,0,0,
	0,0,1,1,0,
	0,0,0,0,0,
	0,0,1,1,0,
	0,0,1,0,0
};
int value[5] = { 9,8,21,15,4 };
int main()
{

	int sum = 0, Max = 0,Maxidx=0;
	for (int i = 0; i < 5; i++) {
		sum = 0;
		for (int j = 0; j < 5; j++) {
			sum += arr[j][i];
		}
		if (Max < sum) {
				Max = sum;
				Maxidx = i;
		}
	}
	cout << value[Maxidx];
}
*/

/*
//연결노드의 출력
int arr[4][4] = {
	0,1,0,1,
	0,0,0,1,
	1,0,0,1,
	0,0,0,0
};
int value[4] = { 15,49,-77,88 };

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < 4; i++) {
		if (arr[n][i] == 1) {
			cout << i <<' ';
			cout << value[i]<<endl;
		}
	}
	return 0;
}
*/

/*
트리
int arr[6][6] = {
	0,1,1,0,0,0,
	0,0,0,1,1,0,
	0,0,0,0,0,1,
	0,0,0,0,0,0,
	0,0,0,0,0,0,
	0,0,0,0,0,0,
};
char value[6] = { 'A','B','T','R','B','G'};

void run(int now)
{
	for (int i = 0; i < 6; i++) {
		if (arr[now][i] == 0) continue;
		run(i);
	}
}

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < 6; i++) {
		if (arr[i][n] == 0) continue;
			cout << i;
	}
}
*/

/*
int arr[4][4] = {
	0,0,1,0,
	1,0,1,0,
	0,1,1,1,
	0,0,1,1
};
char value[4] = { 'A','B','C','D' };


int main()
{
	int n;
	cin >> n;

	// 들어온 값 arr[n][j]
	for (int j = 0; j < 4; j++) {
		if (arr[n][j] == 0) continue;
		cout << value[n] << "일대 나간 값" << value[j] << endl;
	}

	// 나간 값 arr[i][n]
	for (int i = 0; i < 4; i++) {
		if (arr[i][n] == 0) continue;
		cout << value[n] << "일때 들어온 값" << value[i]<<endl;
	}	
}
*/

/*int arr[6][6] = {
	0,1,1,1,
	0,0,1,0,
	1,0,1,0,
	0,0,0,0
};

int via[4] = { 0 };
int cnt = 0;
char path[10];

void run(int now)
{
	if (now == 2) {
		cout << path << ' '<<endl;
		cnt++;
		return;
	}

	cout << now;
	for (int j = 0; j < 4; j++) {
		if (arr[now][j] == 0) continue;
		if (via[j] == 1) continue;

		path[now] = 'A'+j;
		via[j] = 1;

		run(j);

		path[now] = 0;
		via[j] = 0;
		// via[j] 초기화x 연결된 노드를 1회씩만 모두 탐색 ex) 탐색의 가능확인
		// via[j] 모든 노드를 탐색 ex) 탐색한 총 가지수
	}
}

int main()
{
	via[0] = 1;
	run(0);
	cout << cnt;
}*/

// ex)0번 부터 3까지 갈수 있는 길의 개수
// ex)0부터 3까지 갈 수있는지 여부

//가중치 최소값 구하기
/*
int arr[4][4] = {
	0,50,60,300,
	0,0,7,0,
	30,0,0,10,
	0,0,0,0
};
int via[4];
int Min = 21e8;

void run(int now, int sum)
{
	if (now == 3) {
		cout << sum << ' ';
		if (Min > sum) Min = sum;
		return;
	}
	for (int to = 0; to < 4; to++) {
		if (arr[now][to] == 0) continue;
		if (via[to] == 1) continue;
		via[to] = 1;
		run(to, sum + arr[now][to]);
		via[to] = 0;
		
	}
}
int main() 
{
	via[0] = 1;
	run(0, 0);
	cout << "최소";
	cout << Min;

	return 0;
}
*/

/*
int arr[10][10] = {
	0
};
int via[10];
int n;

void func(int now)
{
	cout << now << ' ';
	for (int to = 0; to <= n; to++) {
		if (arr[now][to] == 0) continue;
		if (via[to] == 1) continue;
		

		func(to);
		via[to] = 0;
	}
}

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> arr[i][j];
		}
	}
	int flag = 999;
	func(0);
	return 0;
}
*/

/*
vector<vector<int>> arr;
//vector<vector<int>> arr(3); 3*0행렬
vector<vector<int>> vrr(4);
int main()
{
	vrr[0] = { 1,2,3 };
	vrr[1] = { 2 };
	vrr[2] = { 2 };
	for (int i = 0; i < arr.size(); i++) {
		for (int j = 0; j < arr[i].size(); j++) {
			cout << arr[i][j];
		}
		cout << endl;
	}
	return;
}
*/

/*
vector<vector<int>> arr(3);
//2차원 벡터의 초기화 과정
// n으로 임의의 크기의 배열생성 가능
//vector<int>arr[3]
// n으로 임의의 크기의 배열생성 불가
int main()
{
	//arr[0] = { 1,2,3 };

	arr = {
		{1,2,3},
		{2,3,4},
		{4,5,6}
	};
	for (int i = 0; i < arr.size(); i++) {
		for (int j = 0; j < arr[i].size(); j++) {
			cout << arr[i][j];
		}
		cout << endl;
	}
		
	return 0;
}
*/

/*
int main()
{
	vector<vector<int>> arr(5);
	arr[0] = { 3 };
	arr[1] = { 2,0 };
	arr[2] = { };
	arr[3] = { 2,4 };
	arr[4] = { 2 };

	for (int i = 0; i < arr.size(); i++) {
		for (int j = 0; j < arr[i].size(); j++) {
			cout << arr[i][j];
		}
		cout << endl;
	}

	int n=3;
	for (int i = 0; i < arr[n].size(); i++) {
		cout << arr[n][i];
	}

}
*/

/*
vector<vector<int>> arr(5);

void run(int now) 
{
	for (int i = 0; i < arr[now].size(); i++) {
		int next = arr[now][i];
		run(next);
		//다음갈곳을 출력
	}
}

int main()
{
	run(0);
}
*/

//dfs비용찾기
//dfs
//인접행렬/인접리스트
//인접행렬 dfs,used,가중치 dfs
//인접리스트dfs

/*
int arr[100][100];
int n;
int lev;
char path[10];
int via[10];

void input()
{
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> arr[i][j];
		}
	}
}

void run(int now)
{
	if (lev == 2) {
		for (int i = 0; i < 3; i++) {
			cout << path[i] << ' ';
		}
		cout << endl;
	}

	for (int to = 0; to < n; to++) {
		if (arr[now][to] == 0) continue;
		if (via[to] == 1) continue;

		lev++;
		path[lev] = '0' + to;
		via[to] = 1;

		run(to);

		lev--;
		path[lev] = 0;
		via[to] = 0;

	}
}


int main()
{
	cin >> n;
	input();
	path[0] = '0';
	run(0);
}
*/

// now는 목적지의 value

/*
int n;
char arr[9] = "RKFCBICM";
int via[10] = { 0 };
char path[10];
int lev = 0;

void input()
{
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> arr[i][j];
		}
	}
}


void func(int now)
{
	if (lev == 2) {
		cout << path << endl;
		return;
	}
	for (int to = 0; to < n; to++) {
		if (arr[now] == 0) continue;
		if (via[to] == 1) continue;
		lev++;
		via[to] = 1;
		path[lev] = arr[to%8];

		func(to);

		lev--;
		via[to] = 0;
		path[lev] = 0;
	}
}

int main()
{
	input();
	func(0);
	
}
*/

//문자열노드
/*

int arr[8][8] = { 0,1,1,1,0,0,0,0,
				1,0,0,0,1,1,0,0,
				1,0,0,0,0,0,0,0,
				1,0,0,0,0,0,1,1,
				0,1,0,0,0,0,0,0,
				0,1,0,0,0,0,0,0,
				0,0,0,0,1,0,0,0,
				0,0,0,0,1,0,0,0,
};
char value[10] = "RKFCBICM";
int via[10] = { 0 };
int n;
char path[10];
void func(int now)
{
	for (int to = 0; to < 8; to++) {
		if (arr[now][to] == 0) continue;
		if (via[to] == 1) continue;
		path[now] = value[to];
		via[to] = 1;

		func(to);


		via[to] = 0;
	}
}

int main()
{
	func(0);
}

*/


/*
bfs
그래프의 완전탐색
dfs의 방향성 세로 깊이
0,1,3,4,5,6,2
bfs의 방향성 가로 너비
0,1,2,3,4,5,6
특정 노드로 부터 인접한 노드 먼저 탐색
like 바이러스
후보 넣는 순서에 유의
큐의 사용(후보를 넣기 위해)
선입선출(fifo) 맛집대기열
삽입,추출,peek o(1)

bfs의 단계
	1. queue의 준비
		queue생성
		queue 시작노드의 삽입
	2. bfs의 동작
		대기열의 맨 앞 노드를 방문 
			now: 방문 중인 노드
		내가 갈 수있는 노드판단
		가능: queue에 노드 값을 넣어줌
	3. bfs의 종료
		queue 더 이상 갈 노드가 없을때 까지
	
	queue의 사용
	quque<int> q;
	#1. 삽입연산
		q.push(1)
		q.push(2)
		q.push(3)
	#2. 맨 앞 값의 확인
		q.front()
	#3. 사이즈
		q.size()
	#4. 공백검사
		q.empty()
		비어있으면 true
		아니면 false
	# 삭제연산
		q.pop()
		맨 앞의 요소를 삭제
	
	BFS
	queue의 준비
	시작노드 queue에 삽입

	bfs동작
	now 지금 방문노드를 queue맨 앞에 가져옴
	now서 갈수 있는 노드를 판단

	bfs,dfs의 비교
	ex) 지하철 노선도
	bfs
		인접한 노드(거리순)
		*최단 경로찾기
	dfs
		재귀
		backtracking
		모든 조합/순열(경우의 수)
		*모든 경로찾기
	
	dfs,bfs의 시간복잡도
	dfs,bfs일반적 완전탐색
	V:vertext
	E:edge
	인접행렬: O(V^2)
	인접리스트: O(V+E)

	dfs->backtracking
	재귀의 시간 복잡도
	O(2^N)~O(N!)

*/

/*
7 6 
0 1
0 2
1 3 
1 4
4 5 
4 6
*/


//인접행렬로 구현한 bfs
/*
int mat[10][10];
int n, m; //노드,간선

void bfs(int start)
{
	queue<int> q;
	q.push(start);
	
	while (!q.empty()) {
		int now = q.front();
		q.pop();
		cout << now;
			for (int next = 0; next < n; next++) {
				if (mat[now][next] == 0) continue;
				q.push(next);
		}
	}

}
int main()
{
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int from, to;
		cin >> from >> to;
		// 단방향 연결
		mat[from][to] = 1;
	}
	bfs(0);
}

*/

/*
// 인접리스트로 구현한 bfs 미완
int mat[10][10];
vector<vector<int>> v;

void bfs(int start)
{
	queue<int> q;
	q.push(start);

	while (!q.empty()) {
		int now = q.front();
		q.pop();
		cout << now;

		for (int i = 0; i < v[now].size(); i++) {
			int next = v[now][i];
			q.push(next);
		}
	}
}
*/

/*
//사이클 bfs 미완
//사이클 방지
//양방향 그래프 -> 방문처리 필요
//예약된 것은 미래 갈 노드의 확정
//삽입 될때
//사이클 생기면 visited를 사용
int mat[10][10];
int n, m; //노드,간선
int via[10] = { 0 };		//visit준비,시작노드의 방문처리


void bfs(int start)
{
	queue<int> q;
	q.push(start);
	
	while (!q.empty()) {
		int now = q.front();
		q.pop();
		for (int next = 0; next < n; next++) {
			if (mat[now][next] == 0) continue;
			if (via[next] == 1) continue;
			via[next] = 1;

			q.push(next);
		}
	}

}
int main()
{
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int from, to;
		cin >> from >> to;
		// 양방향 연결
		mat[from][to] = 1;
		mat[to][from] = 1;
	}
	bfs(0);
}
*/

/*
그래프 구현 dfs,bfs로 확인
동일한 결과
간선,접점4 5
0 1
0 2
1 2
1 3
2 3
*/



/*최단거리 기록의 필요
visited 수정
index: 노드번호
value: 노드까지의 거친 횟수
0 1 2 3
1 2 2 3
n의 value
n-1까지 오기위한 경로를 더함

int mat[10][10];
int n, m; //노드,간선
int via[10] = { 0 };		//visit준비,시작노드의 방문처리


void bfs(int start)
{
	queue<int> q;
	q.push(start);
	via[start] = 1;

	while (!q.empty()) {
		int now = q.front();
		q.pop();
		cout << now;
		for (int next = 0; next < n; next++) {
			if (mat[now][next] == 0) continue;
			if (via[next] != 0) continue;
			//방문 -> 1~n
			//미방문 -> 0

			q.push(next);
			//via[next] = 1;
			//지금 예약하려는 next는 now경로에서 한 번 더 움직임
			via[next] = via[now] + 1;
		}
	}

	for (int i = 0; i < n; i++) {
		cout << i << "까지의 최단 경로는" << via[i] << '\n';
	}
}
int main()
{
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int from, to;
		cin >> from >> to;
		// 양방향 연결
		mat[from][to] = 1;
		mat[to][from] = 1;
	}
	bfs(0);
}
*/

// 복습
/*
int via[4];
vector<vector<int>> alist(4);

void run(int now)
{
	for (int i = 0; i < alist[now].size(); i++) {
		cout << now;
		int next = alist[now][i];
		if (via[next]) continue;
		via[next] = 1;
		run(next);
	}
}
int main(){
	alist[0] = {1,2,3};
	alist[1] = {2,3};
	alist[2] = {3,0};
	alist[3] = {1,2,3};

	via[0] = 1;
	run(0);

	return 0;
}
*/


//가중치 리스트
/*
struct node {
	int n;
	int price;
};

int via[4];
vector<vector<node>> alist(4);

void run(int now, int sum) {
	if (now == 3) {
		cout << sum << endl;
		return;
	}
	for (int i = 0; i < alist[now].size(); i++) {
		node next = alist[now][i];
		if (via[next.n]==1) continue;
		via[next.n] = 1;
		run(next.n, next.price);
		via[next.n] = 0;
	}
}

int main()
{
	alist[0] = { {1,5},{2,7},{3,10} };
	alist[1] = { {2,2},{3,1} };
	alist[2] = { {3,1},{0,90} };

	via[0] = 1;
	run(0, 0);


}
*/


/*
* DFS 시작문제
int arr[100][100] = { 0 };
int n;
int via[10] = { 0 };
void func(int now)
{
	cout << now << ' ';
	for (int to = 0; to < 5; to++) {
		if (arr[now][to] == 0) continue;
		if (via[to] == 1) continue;
		via[to] = 1;
		func(to);
		via[to] = 0;
	}
}

void input()
{
	cin >> n;
	for (int j = 0; j < n; j++) {
		for (int k = 0; k < n; k++) {
			cin >> arr[j][k];
		}
	}
}
int main() {
	input();
	 func(0);
	return 0;
}
*/

/*
큐
int arr[5][5] = {
	0,1,0,0,1,
	0,0,1,1,0,
};
char val[6] = "ACTSB";
void dfs(int now)
{
	cout << val[now];
	for (int to = 0; to < 5; to++) {
		if (arr[now][to] == 0) continue;
	dfs(to);
	}
}

queue<int> q;

int main()
{
	q.push(1);
	q.push(2);
	q.push(3);

	//while로 전체 하나씩 빼는 코드
	while (q.empty()==false)
	{
		cout << q.front();
		q.pop();
		//queue는 empty일때 front출력불가
	}
	//dfs(0);
	출발할 노드 번호를 큐에 넣고 시작
	1. now에서 다음 갈 곳을 찾아 큐에 넣기
	2.큐 하나 빼기
	큐에 들어간것은 탐색 아님
	now가 탐색중
	q.push(0);
	while (!q.empty()) {
		//1.큐에서 하나 빼기
		int now = q.front();
		q.pop();

		//2.연결된것을 찾아 큐에 넣기
		for (int to = 0; to < 5; to++) {
			if (arr[now][to] == 0) continue;
			q.push(to);
		}
	}
}
*/

/*
int arr[10][10] = { 0 };
int node;
queue<int> q;

void input()
{
	cin >> node;
	for (int i = 0; i < node; i++) {
		for (int j = 0; j < node; j++) {
			cin >> arr[i][j];
		}
	}
}

void bsp()
{
	q.push(0);
	while (q.empty() == 0) {
		int now = q.front();
		q.pop();

		cout << now;
		for (int to = 0; to < node; to++) {
			if (arr[now][to] == 0) continue;
			q.push(to);
		}
	}
}
int main() {

	input();
	bsp();
	return 0;
}
*/

/*최소이동 네비
int arr[6][6] = {
	0,0,1,0,1,1,
	1,0,0,1,0,0,
	0,0,0,0,1,0,
	1,0,0,0,0,0,
	1,0,0,0,0,0,
	0,0,0,0,0,0,
};
int via[10];
int node = 6;
int lev = 0;
int A, B;
char path[10];

void func(int now)
{
	if (now == B) {
		cout << path <<endl;
		return;
	}
	for (int to = 0; to < node; to++) {
		if (arr[now][to] == 0) continue;
		if (via[to] == 1) continue;
		via[to] = 1;
		path[lev] ='0'+to;
		lev++;

		func(to);

		via[to] = 0;
		lev--;
	}
}

int main()
{
	cin >> A >> B;
	A = A - 1;
	B = B - 1;
	func(A);
}
*/

//사이클 제거 인접리스트
//vector<vector<int>>alst(4);
//queue<int> q;
//int via[10];
//
//int main()
//{
//	alst[0] = { 1 };
//	alst[1] = { 2,3 };
//	alst[2] = { 0,3 };
//
//
//	q.push(0);
//	while (q.empty()==0) {
//		int now = q.front();
//		q.pop();
//
//		for (int to = 0; to < alst[now].size(); i++) {
//			int next = alst[now][to];
//			if (via[next] == 1) continue;
//			via[next] = 1;
//			q.push(next);
//		}
//	}
//}
//

/*
vector<vector<int>> arr(5);
queue<node> q;
int via[10];
int lev;
struct node {
	int n;
	int lev;
};

int main()
{
	arr[0] = { 1,2,3 };
	arr[1] = { 2,3};
	arr[2] = { 3};
	arr[3] = { 4};

	q.push(0);

	while (q.empty() == 0) {
		int now = q.front();
		node.pop();
		
		if (now == 4) {
			cout<<
		}

		for (int to = 0; to < arr[now].size(); to++) {
			int next = arr[now][to];
			if (via[next] == 1) continue;
			via[next] = 1;
			q.push(next);
		}
	}
};

*/

//2차원 배열에서의 확산
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int arr[3][3];
struct Node {
	int y, x;
};
queue<Node> q;
int directY[4] = { -1, 1, 0, 0 };
int directX[4] = { 0, 0, 1, -1 };

int main() {

	arr[0][0] = 1;
	q.push({ 0, 0 });

	while (!q.empty()) {
		Node now = q.front();
		q.pop();

		//다음 갈수있는곳을 큐에 등록
		for (int t = 0; t < 4; t++) {
			int ny = now.y + directY[t];
			int nx = now.x + directX[t];
			if (ny < 0 || nx < 0 || ny >= 4 || nx >= 4) continue;
			if (arr[ny][nx] != 0) continue;

			arr[ny][nx] = arr[now.y][now.x] + 1;
			q.push({ ny, nx });
		}
	}

	return 0;
}

인접리스트
가중치 인접리스트
bfs큐 가장 가까운 노드

