string
길이	str.length()
결합	str1+str2
대입	=
비교	==,!=,<.>
부분복사 substr()
찾기	find(),index반환


수업
#define _CRT_SECURE_NO_WARNINGS_CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstring>
using namespace std;

int main()
{

	//char str[100] = "string";
	//
	//cout << strlen(str);

	//// stringclass+
	//string s = "string";
	//cout << s.length();
	////string -> pasing

	//char a[100] = "abc";
	//char b[100] = "bcd";
	//
	//string c = "abc";
	//string d = "abc";
	//
	//if (c == d)
	//	cout << '1';
	//else
	//	cout << '0';

	//// string 결합
	//int j = 0;
	//for (int i = strlen(a); i < 100; i++) {
	//	if (b[j] == '0')
	//	{
	//		a[i] = '\0';
	//		break;
	//	}
	//	a[i] = b[j++];
	//}
	//cout << a <<endl;

	//// 길이 구하기
	//int lena = strlen(a);
	//int lenb = strlen(b);
	//// B의 문자를 A의 두에 구함
	//for (int i = 0; i < lenb; i++) {
	//	a[i+lena] = b[i];
	//}
	//// NULL문자를 붙힘
	//a[lena + lenb] = '\0';
	//cout << a << endl;

	//// cstring
	//// warning crt
	///*strcat(a, b);
	//cout << a <<endl;
	//*/

	///*string class
	//연산자 사용가능
	//+ 연산자
	//*/
	//
	//c += d;
	//cout << c <<endl;

	//	//1.복사
	//	//2.부분 찾기
	//	//3.문자열의 특정 위치
	//	//4.문자열의 형태변경

	////Q4 복사
	//strcpy(a, b);
	//for (int i = 0; i < lena; i++)
	//	a[i] = b[i];
	//a[lena]='\0';
	//cout << a <<endl;
	//
	//
	//strcpy(b, a);
	//cout << b << endl;

	//string A = "string";
	//string B;
	//B = A;
	//cout << B;

	//Q5 부분복사
	// 2정수 입력 부분 복사
	
	/*char a[100]="string", b[100];s
	int n, m;
	int idx = 0;
	cin >> n >> m;
	for(int i=n;i<=m;i++){
		b[idx++] = a[i];
	}
	b[idx] = '\0';
	cout << b;*/

	//cstring
	// 전체=strcpy
	// 일부=strncpy(저장될 배열 위치,복사할 배열 위치,복사 구간의 크기)
	/*char a[100] = "string";
	char b[100];
	int n, m;
	cin >> n >> m;
	strncpy(b, a + n, m - n );
	b[m-n] = '\0';
	cout << b;*/

	//string class
	//부분 문자열 substr()
	//substr(시작위치,구간크기)
	//구간크기>문자열 길이시 마지막 문자까지만
	/*string a = "string";
	string b;
	int n, m;
	cin >> n >> m;
	b=a.substr(n, m - n);
	cout << b;*/

	//문자열의 등장위치
	/*char a[100] = "string";
	char b[100];
	cin >> b;
	int lena = strlen(a), lenb = strlen(b);
	for (int i = 0; i < lena; i++) {
		for (int j = 0; j < lenb; j++) {
			if (a[i+j] == b[j]) {
				cout << i <<endl;
				return 0;
			}
		}
	}
	return 0;*/

	//implement
	/*for (int i = 0; strlen(a) - strlen(b); i++) {
		int cnt = 0;
		for (int j = 0; j < strlen(b); j++) {
			if (a[i + j] == b[j])
				cnt++;
		}
		if (cnt == strlen(b)) {
			cout << i;
			return 0;
		}
	}*/

	/*if (strstr(a, b) != NULL)
		cout << 1;
	포인터의 return 찾으려는 문자열 존재시 처음 찾은 위치서 남은 문자열 전체 반환*/

	//string class
	//부분 문자열 찾기
	string a = "string";
	string b;
	cin >> b;
	//찾기 가능
	//1.string::npos -1로 인식
	if (a.find(b)==-1)
		cout << "not find";
	else
		cout << "index is " << a.find(b);


	/*인덱스의 return 처음 찾은 위치
	없는 경우 쓰레기값의 return*/


}