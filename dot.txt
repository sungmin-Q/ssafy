/*
union find disjointset
소속/그룹을 만들고 유지/관리하는 알고리즘
결합이 된 상태(팀을 구성)
union:서로 두개의 다른 집합으로 결합하는 작업
ex) M&A
find:특정 소속에 속한 멤버가 어떤 소곡에 포함되어있는지 찾아가고 판단하는 작업
ex) 결제를 받기 위해 대장을 찾아가는 작업
2가지 동작으로 구성된다

find
팀장이 소속 그 자체
대장이 곧 소속
찾아가는 과정: 재귀로 구성한다.
계속해서 팀장을 찾으러 가야함
find(11)->find(6)->find(3)->find(0)
특정 노드에서 시작하여 나의 부모가 누구인지 기록하면 재귀로 사용가능
dat: 나의 부모가 누구인지 저장
parent
index: 노드
value: 부모
노드->부모->노드->부모...

*/

#include <iostream>
using namespace std;

/*
9 6
0 3
3 6
6 8
3 7
1 4
2 5
*/
//find:소속을 찾아가는 알고리즘
// 정보:정보(부모정보)를 저장할 parent의 필요
// find최적화 path compresson(경로압축)
// 소속을 단 1회 찾으면 O(1)로 접근 가능
//경로 압축
//장점: 시간 효율성의 증가
//단점: 돌이킬수 없음

int parent[20];
int N, M;

int Find(int now) {
	//find의 시간 복잡도: O(N)
	//종료조건
	//now의 부모가 나랑 같다면: 소속을 찾음
	if (now == parent[now]) {
		return now;
	}
	//재귀구성
	//대장이 아니면 나의 부모를 찾아가라

	//나의 부모(소속)은 = 돌아올때 가지고 있던 값이다.
	//return find(parent[now]); 경로 압축 전

	//경로 압축
	//O(1)~O(NlogN)
	return parent[now] = Find(parent[now]);
}

void Union(int A,int B) {
	// 두 개의 노드 결합이 아닌
	// 집합과 집합간의 합
	// 유니온 대장끼리만 결합,밑의 노드에는 합병 정보가 갱신되지 않음
	// 합병후 
	
	// #1.각 노드의 소속을 확인
	int pa = Find(A);
	int pb = Find(B);

	// #2.B의 소속을 A로 만듬
	parent[pb] = pa;
};
int main()
{
	//parent는 자기자신이 대장인 상태
	//개별적인 상태로 시작
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		parent[i] = i;
	}

	for (int i= 0; i < M; i++) {
		int A, B;
		cin >> A >> B;
		parent[A] = B;
		Union(A, B);
	}

	/*
	a와 b가 같은 그룹인지 비교 하기위해
	parent를 사용하지 않음
	한번더 업데이트 필요
	if(parent[a]==parent[b])
	A의 대표를 다시 한번 찾아가며  parent를 update
	상위 노드에 대한 경로압축
	if(parent[2]==parent[6]) -> false;
	if(Find[2]==Find[6]) -> true;
	*/
	int a, b;
	cin >> a >> b;

}

/*
	n개의 회사 m개의 인수확병 과정
	A가  B를 인수할때 A회사가 대표회사이고 B회사로부터
	10명의 개발자 데려옴 M개의 인수 확병후 회사들에 남들 개발자의 수
*/

#include<iostream>
#include<queue>
using namespace std;
좌표를 입력으로 받음
struct Node {
	int row, col;
};
int N, M;
int Map[100][100];
void input() {
	cin >> N >> M;
	for (int row = 0; row < N; row++) {
		for (int col = 0; col < N; col++) {
			cin >> Map[row][col];
		}
	}
}
int visited[100][100] = { 0 };
int dr[] = { -1,1,0,0 };
int dc[] = { 0,0,-1,1 };
bool isOut(int row, int col) {
	return row < 0 || col < 0 || row >= N || col >= M;
}
void bfs(int row, int col) {
	queue<Node> qu;
	visited[row][col] = 1;
	qu.push({ row,col });

	while (!qu.empty()) {
		Node now = qu.front();
		qu.pop();

		for (int t = 0; t < 4; t++) {
			int nr = now.row + dr[t];
			int nc = now.col + dc[t];
			검사항목 
			범위 외부,육지인지,방문했는지
			if (isOut(nr, nc)) continue;
			if (Map[nr][nc] == 0) continue;
			if (visited[nr][nc] == 1) continue;
			visited[nr][nc] = 1;
			qu.push({ nr,nc });
		}
	}
}

int main()
{
	input();
	int cnt = 0;
	for (int row = 0; row < N; row++) {
		for (int col = 0; col < M; col++) {
			if (visited[row][col] == 0 && Map[row][col] == 1) {
				bfs(row, col);
				cnt++;
			}
		}
	}
	cout << cnt;
	return 0;
}


#include <iostream>
#include <queue> 
using namespace std;
struct Node {
	int y; // y좌표 
	int x; // x좌표 
};

int si, sj, ei, ej;
char Map[4][6];
int cnt;

void bfs(int y, int x) {
	//시작노드,방문경로 초기화
	queue<Node>q;
	q.push({ y, x });

	int visited[4][6] = { 0, };
	visited[y][x] = 0;

	//방향배열 설정
	int ydir[] = { 1, -1, 0, 0 };
	int xdir[] = { 0, 0, -1, 1 };

	//bfs
	while (!q.empty()) {
		Node now = q.front();
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = now.y + ydir[i];
			int nx = now.x + xdir[i];
			if (ny < 0 || nx < 0 || ny >= 4 || nx >= 6) continue; 
			if (visited[ny][nx] != 0) continue;
			if (Map[ny][nx] == '1') continue;
			if (Map[ny][nx] == '2') cnt++;
			//visited배열의 경로 나타내 줄때 now로 접근
			visited[ny][nx] = visited[now.y][now.x] + 1;
			q.push({ ny, nx });
		}
	}

	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 6; j++) {
			cout << visited[i][j]<< " ";
		}
		cout << '\n';
	}
	cout << cnt<<"회";
}
void input()
{
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 6; j++) {
			cin >> Map[i][j];
		}
	}
}

int main() {
	input();
	bfs(0, 0);
}