#include <iostream>
#include <vector>
using namespace std;

const int N = 101;
bool via[N];
vector <int> lst[N];
char path[N];
int cnt;

void dfs(int now)
{
	via[now] = true;
	for (int to = 0; to < lst[now].size(); to++) {
		int next = lst[now][to];
		path[now] = '1' + to;
		if (!via[next]) {
			dfs(next);
			cnt++;
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, E;
	cin >> N >> E;
	for (int i = 0; i < E; i++) {
		int n, m;
		cin >> n >> m;
		lst[n].push_back(m);
		lst[m].push_back(n);
	}
	dfs(1);
	cout << cnt;
}

/*전위순회 후위순회*/
#include <iostream>
using namespace std;

struct node {
	int data;
	node* left;
	node* right;
};

node* newNode(int data) {
	node* tmp = new node;
	tmp->data = data;
	tmp->left = tmp->right = NULL;
	return tmp;
}

void preorder(node* root) {
	if (root == NULL) return;
	cout << root->data << ' ';
	preorder(root->left);
	preorder(root->right);
}

void postorder(node* root) {
	if (root == NULL) return;
	postorder(root->left);
	postorder(root->right);
	cout << root->data << ' ';
}

int main()
{
	node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);
	
	cout << "preorder: ";
	preorder(root);
	cout << endl;

	cout << "postorder: ";
	postorder(root);


}

#include <iostream>
using namespace std;

struct node {
	int data;
	node* left;
	node* right;
};

node* newNode(int data) {
	node* tmp = new node;
	tmp->data = data;
	tmp->left = tmp->right = NULL;
	return tmp;
}

void preorder(node* root) {
	if (root == NULL) return;
	cout << root->data << ' ';
	if (root->left < root->right) {
		preorder(root->right);
		preorder(root->left);
	}
	else {
		preorder(root->left);
		preorder(root->right);
	}
}

void postorder(node* root) {
	if (root == NULL) return;
	if (root->left < root->right) {
		postorder(root->right);
		postorder(root->left);
	}
	else {
		postorder(root->left);
		postorder(root->right);
	}
	cout << root->data << ' ';
}

int main()
{
	node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(4);
	root->left->left = newNode(3);
	root->right->left = newNode(5);
	root->right->right = newNode(6);
	
	cout << "preorder: ";
	preorder(root);
	cout << endl;

	cout << "postorder: ";
	postorder(root);
}

#include <iostream>
#include <queue>
using namespace std;

const int N = 100;
int arr[N][N];
int n,m;

void bfs(int start)
{
	queue<int> que;
	que.push(start);
	while (!que.empty()) {
		int now = que.front();
		que.pop();
		cout << now;
		for (int next = 0; next < n; next++) {
			if (!arr[now][next])
				que.push(next);
		}
	}
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int from, to;
		cin >> from >> to;
		arr[from][to] = 1;
	}
	bfs(0);
}


#include<iostream>
#include<queue>
using namespace std;
int node;
int start = 0;
int arr[10][10] = {
	
};

void bfs() {
	int visited[6] = { 0 };
	queue<int>qu;
	visited[start] = 1;
	qu.push(start);

	while (!qu.empty()) {
		int now = qu.front(); qu.pop();
		cout << now << " ";
		for (int x = 0; x < 6; x++) {
			if (arr[now][x] == 1 && visited[x] == 0) {
				visited[x] = 1;
				qu.push(x);
			}
		}
	}
}
void input()
{
	for (int i = 0; i < node; i++) {
		for (int j = 0; j < node; j++) {
			cin >> arr[i][j];
		}
	}
}
int main()
{
	cin >> node;
	input();
	bfs();


	return 0;
}